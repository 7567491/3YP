分析一份财报，转化成json和可以结构化的数据，以供后续分析使用。
这份财报是/annual/2023年报.pdf
你可以调用LLM，也可以调用pdf解析器，或者两者结合使用。

数据文件存放在/data/annual/2023.json
数据库使用/data/data.db,使用sqlite3
你还可以构造一些其他的中间数据保存文件

llm使用.env文件里的moonshot参数，你可以自己设计一些提示词


这个财报解析程序的核心目标是将PDF格式的财报转换成结构化的数据，以便后续分析使用。
采用一个流水线式的处理方案，将整个过程分为数据提取、理解分析和存储三个主要阶段

在数据提取阶段，我们首先使用PDF解析工具从年报中提取文本内容。
考虑到财报通常比较规范，包含多个固定的章节（如财务报表、管理层讨论与分析等），
我们可以在提取时保留文档的基本结构。
这些原始数据可以先保存为中间文件，这样即使处理中断也能从断点继续。

理解分析是最核心的阶段。
我们将使用Moonshot的LLM来理解文本内容，但需要特别注意的是财报文本往往很长，需要分段处理。
对于每个段落，我们设计特定的提示词来引导LLM提取关键信息，比如财务数据、业务发展、风险因素等。
这个阶段的输出应该是结构化的JSON格式，便于后续处理

最后是数据存储阶段，我们会将处理后的结构化数据存入SQLite数据库。
数据库的设计应该考虑到后续查询和分析的需求，
比如按年份、按指标类型等多个维度进行查询。
同时，原始的JSON数据也应该保留，这样将来需要调整数据结构时可以重新导入。

整个程序的运行应该是可配置的，通过配置文件来控制处理的细节，比如LLM的参数、数据存储路径等。
另外，考虑到处理过程可能出现各种异常（网络问题、解析错误等），程序需要有完善的错误处理机制和日志记录。


基础版本
首先，程序会读取指定路径下的PDF文件。
考虑到唐山银行的年报格式相对固定，我们可以使用pdfplumber库来提取文本内容。
在提取过程中，我们主要关注财务数据相关的章节，比如资产负债表、利润表等关键财务报表部分。
这些内容通常有比较明确的标题和结构，便于定位和提取。

提取出的文本会被分成合适的片段。
我们不需要过于复杂的分段逻辑，可以简单地按照章节或者固定长度来划分。
这样做的目的是确保每个片段的长度都在LLM的处理范围内。
对于每个文本片段，我们构造一个简单的提示词，要求LLM识别其中的财务数据和关键信息。
提示词可以类似"请从以下财报文本中提取关键财务数据，包括具体数值和对应的财务指标名称，并以JSON格式输出"。
在使用Moonshot API时，我们采用最基础的调用方式。
通过环境变量读取API密钥，使用moonshot-v1-8k模型来处理文本。
为了避免API调用失败带来的问题，我们实现一个简单的重试机制，在请求失败时最多重试3次。

对于LLM返回的结果，我们先采用最简单的JSON格式来存储。
这个JSON文件会包含基本的财务数据，比如资产总额、负债总额、营业收入等关键指标。
同时，我们设计一个基础的SQLite数据库表结构，包含年份、指标名称、数值等基本字段。

这样的设计虽然简单，但足以支持最基本的数据查询需求。
程序运行时会在控制台输出基本的处理进度信息，让用户了解当前的处理状态。
如果发生错误，会将错误信息记录下来，但不会中断整个处理流程。
这样即使某个部分处理失败，其他部分的数据仍然可以正常保存。

文件结构

financial_report_parser/
├── config/
│   ├── __init__.py
│   └── settings.py          # 配置文件，存储路径、API参数等配置项
│
├── data/
│   ├── annual/             # 存放年报PDF文件和解析后的JSON
│   │   ├── 2023年报.pdf
│   │   └── 2023.json
│   └── data.db            # SQLite数据库文件
│
├── src/
│   ├── __init__.py
│   ├── pdf_processor.py    # PDF解析相关功能
│   ├── llm_processor.py    # LLM调用和文本处理相关功能
│   ├── data_storage.py     # 数据存储相关功能
│   └── utils.py           # 通用工具函数
│
├── .env                    # 环境变量配置文件，存储API密钥等敏感信息
├── requirements.txt        # 项目依赖
└── main.py                # 程序入口文件


数据库表结构设计放在/doc/db.txt里面
json文件格式设计放在/doc/json.txt里面
提示词设计放在/doc/prompt.json里面